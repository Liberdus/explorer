diff --git a/src/frontend/charts/BlockchainDataSection/BlockchainDataSection.tsx b/src/frontend/charts/BlockchainDataSection/BlockchainDataSection.tsx
index e4c5d68..f1b3544 100644
--- a/src/frontend/charts/BlockchainDataSection/BlockchainDataSection.tsx
+++ b/src/frontend/charts/BlockchainDataSection/BlockchainDataSection.tsx
@@ -106,6 +106,11 @@ export const BlockchainDataSection: React.FC = () => {
       chartSvgName: 'uncleCountRewards',
       route: '/charts/networkstake',
     },
+    {
+      title: 'Daily Active Nodes Chart',
+      chartSvgName: 'networkPendingTxn',
+      route: '/charts/activenodes',
+    },
   ]
 
   return (
diff --git a/src/frontend/charts/DetailChart/index.ts b/src/frontend/charts/DetailChart/index.ts
index 93041b7..5e4f1b6 100644
--- a/src/frontend/charts/DetailChart/index.ts
+++ b/src/frontend/charts/DetailChart/index.ts
@@ -10,3 +10,7 @@ export { DailyBurntSupplyChart } from './DailyBurntSupplyChart'
 export { DailyTransactionFeeChart } from './DailyTransactionFeeChart'
 export { DailyDistributedSupplyChart } from './DailyDistributedSupplyChart'
 export { DailyNetworkStakeChart } from './DailyNetworkStakeChart'
+export { DailyTxFeeSetChart } from './DailyTxFeeSetChart'
+export { DailyNodeRewardRateChart } from './DailyNodeRewardRateChart'
+export { DailyRequiredStakeChart } from './DailyRequiredStakeChart'
+export { DailyActiveNodesChart } from './DailyActiveNodesChart'
diff --git a/src/frontend/charts/MarketDataSection/MarketDataSection.tsx b/src/frontend/charts/MarketDataSection/MarketDataSection.tsx
index b91a45c..e077fa4 100644
--- a/src/frontend/charts/MarketDataSection/MarketDataSection.tsx
+++ b/src/frontend/charts/MarketDataSection/MarketDataSection.tsx
@@ -69,6 +69,13 @@ export const MarketDataSection: React.FC = () => {
     { title: 'LIB Market Capitalization Chart', chartSvgName: 'ethMarketCap', route: '/charts/marketcap' },
     { title: 'Total Supply & Market Cap Chart', chartSvgName: 'pieChart', route: '/charts/supply' },
     { title: 'LIB Supply Growth Chart', chartSvgName: 'ethSupplyGrowth', route: '/charts/libsupplygrowth' },
+    { title: 'Transaction Fee Set (USD) Chart', chartSvgName: 'avgTxnFee', route: '/charts/txfeeset' },
+    {
+      title: 'Node Reward Rate (USD) Chart',
+      chartSvgName: 'dailyBlockRewards',
+      route: '/charts/noderewardrate',
+    },
+    { title: 'Required Stake (USD) Chart', chartSvgName: 'blockCount', route: '/charts/requiredstake' },
   ]
 
   return (
diff --git a/src/frontend/charts/OverviewSection/OverviewSection.tsx b/src/frontend/charts/OverviewSection/OverviewSection.tsx
index 8b4d476..9829371 100644
--- a/src/frontend/charts/OverviewSection/OverviewSection.tsx
+++ b/src/frontend/charts/OverviewSection/OverviewSection.tsx
@@ -134,10 +134,10 @@ export const OverviewSection: React.FC = () => {
       value: `$${newBurntFee * parseFloat(stabilityFactorStr)}`,
       route: '/charts/dailylibburnt',
     },
-    { title: 'Tx Fee Set', value: `$${transactionFeeUsdStr}` },
-    { title: 'Node Reward / Hr', value: `$${nodeRewardAmountUsdStr}` },
-    { title: 'Stake Required Amount', value: `$${stakeRequiredUsdStr}` },
-    { title: 'Active Nodes', value: activeNodes },
+    { title: 'Tx Fee Set', value: `$${transactionFeeUsdStr}`, route: '/charts/txfeeset' },
+    { title: 'Node Reward / Hr', value: `$${nodeRewardAmountUsdStr}`, route: '/charts/noderewardrate' },
+    { title: 'Stake Required Amount', value: `$${stakeRequiredUsdStr}`, route: '/charts/requiredstake' },
+    { title: 'Active Nodes', value: activeNodes, route: '/charts/activenodes' },
     { title: 'LIB Price Set', value: `$${stabilityFactorStr}`, route: '/charts/libprice' },
     {
       title: 'LIB Supply',
diff --git a/src/frontend/charts/index.ts b/src/frontend/charts/index.ts
index 747da3b..bd0402e 100644
--- a/src/frontend/charts/index.ts
+++ b/src/frontend/charts/index.ts
@@ -11,6 +11,10 @@ export {
   DailyTransactionFeeChart,
   DailyDistributedSupplyChart,
   DailyNetworkStakeChart,
+  DailyTxFeeSetChart,
+  DailyNodeRewardRateChart,
+  DailyRequiredStakeChart,
+  DailyActiveNodesChart,
 } from './DetailChart'
 export { OverviewSection } from './OverviewSection'
 export { BlockchainDataSection } from './BlockchainDataSection'
diff --git a/src/frontend/utils/transformChartData.ts b/src/frontend/utils/transformChartData.ts
index 5d57ca2..e88e65e 100644
--- a/src/frontend/utils/transformChartData.ts
+++ b/src/frontend/utils/transformChartData.ts
@@ -20,6 +20,7 @@ export interface DataPoint {
   accountChartData?: AccountChartData
   distributedSupplyChartData?: DistributedSupplyChartData
   networkStakeChartData?: NetworkStakeChartData
+  activeNodesChartData?: ActiveNodesChartData
 }
 
 export interface NewAddressChartData {
@@ -71,6 +72,10 @@ export interface NetworkStakeChartData {
   penaltyAmount: number
 }
 
+export interface ActiveNodesChartData {
+  standbyNodes: number
+}
+
 export interface SeriesData {
   name: string
   data: DataPoint[]
@@ -870,6 +875,10 @@ export function convertDailyNetworkStatsToSeriesData(
   queryType: {
     dailyPrice?: boolean
     dailyTransactionFee?: boolean
+    dailyTxFeeSet?: boolean
+    dailyNodeRewardRate?: boolean
+    dailyRequiredStake?: boolean
+    dailyActiveNodes?: boolean
   }
 ): {
   seriesData: SeriesData[]
@@ -879,7 +888,14 @@ export function convertDailyNetworkStatsToSeriesData(
     current: number | null
   }
 } {
-  if (!queryType.dailyPrice && !queryType.dailyTransactionFee) {
+  if (
+    !queryType.dailyPrice &&
+    !queryType.dailyTransactionFee &&
+    !queryType.dailyTxFeeSet &&
+    !queryType.dailyNodeRewardRate &&
+    !queryType.dailyRequiredStake &&
+    !queryType.dailyActiveNodes
+  ) {
     throw new Error('No query type selected for daily network stats')
   }
   const seriesData: SeriesData[] = [{ name: '', data: [], zIndex: 1, tooltip: '', visible: true }]
@@ -892,6 +908,14 @@ export function convertDailyNetworkStatsToSeriesData(
   } else if (queryType.dailyTransactionFee) {
     seriesData[0].name = 'Avg Tx Fee (USD)'
     seriesData[0].tooltip = 'Average Transaction Fee in USD'
+  } else if (queryType.dailyTxFeeSet) {
+    seriesData[0].name = 'Transaction Fee Set (USD)'
+  } else if (queryType.dailyNodeRewardRate) {
+    seriesData[0].name = 'Node Reward Rate (USD)'
+  } else if (queryType.dailyRequiredStake) {
+    seriesData[0].name = 'Required Stake (USD)'
+  } else if (queryType.dailyActiveNodes) {
+    seriesData[0].name = 'Active Nodes'
   }
 
   if (!dailyNetworkStats || dailyNetworkStats.length === 0) {
@@ -960,6 +984,124 @@ export function convertDailyNetworkStatsToSeriesData(
           stabilityFactor,
         },
       })
+    } else if (queryType.dailyTxFeeSet) {
+      let timestamp: number
+      let txFeeSetUsd: number
+
+      if (networkResponseType === 'array') {
+        // Array format: [dateStartTime, stabilityFactorStr, transactionFeeUsdStr, stakeRequiredUsdStr, ...]
+        const networkStat = stat as number[]
+        timestamp = networkStat[0]
+        txFeeSetUsd = parseFloat(networkStat[2] as any) || 0
+      } else {
+        const networkStat = stat as DailyNetworkStats
+        timestamp = networkStat.dateStartTime
+        txFeeSetUsd = parseFloat(networkStat.transactionFeeUsdStr) || 0
+      }
+
+      if (txFeeSetUsd > highest.value) {
+        highest = { timestamp, value: txFeeSetUsd }
+      }
+      if (txFeeSetUsd < lowest.value && txFeeSetUsd > 0) {
+        lowest = { timestamp, value: txFeeSetUsd }
+      }
+
+      current = txFeeSetUsd
+
+      seriesData[0].data.push({
+        x: timestamp,
+        y: txFeeSetUsd,
+      })
+    } else if (queryType.dailyNodeRewardRate) {
+      let timestamp: number
+      let nodeRewardRateUsd: number
+
+      if (networkResponseType === 'array') {
+        // Array format: [dateStartTime, stabilityFactorStr, transactionFeeUsdStr, stakeRequiredUsdStr, nodeRewardAmountUsdStr, ...]
+        const networkStat = stat as number[]
+        timestamp = networkStat[0]
+        nodeRewardRateUsd = parseFloat(networkStat[4] as any) || 0
+      } else {
+        const networkStat = stat as DailyNetworkStats
+        timestamp = networkStat.dateStartTime
+        nodeRewardRateUsd = parseFloat(networkStat.nodeRewardAmountUsdStr) || 0
+      }
+
+      if (nodeRewardRateUsd > highest.value) {
+        highest = { timestamp, value: nodeRewardRateUsd }
+      }
+      if (nodeRewardRateUsd < lowest.value && nodeRewardRateUsd > 0) {
+        lowest = { timestamp, value: nodeRewardRateUsd }
+      }
+
+      current = nodeRewardRateUsd
+
+      seriesData[0].data.push({
+        x: timestamp,
+        y: nodeRewardRateUsd,
+      })
+    } else if (queryType.dailyRequiredStake) {
+      let timestamp: number
+      let requiredStakeUsd: number
+
+      if (networkResponseType === 'array') {
+        // Array format: [dateStartTime, stabilityFactorStr, transactionFeeUsdStr, stakeRequiredUsdStr, ...]
+        const networkStat = stat as number[]
+        timestamp = networkStat[0]
+        requiredStakeUsd = parseFloat(networkStat[3] as any) || 0
+      } else {
+        const networkStat = stat as DailyNetworkStats
+        timestamp = networkStat.dateStartTime
+        requiredStakeUsd = parseFloat(networkStat.stakeRequiredUsdStr) || 0
+      }
+
+      if (requiredStakeUsd > highest.value) {
+        highest = { timestamp, value: requiredStakeUsd }
+      }
+      if (requiredStakeUsd < lowest.value && requiredStakeUsd > 0) {
+        lowest = { timestamp, value: requiredStakeUsd }
+      }
+
+      current = requiredStakeUsd
+
+      seriesData[0].data.push({
+        x: timestamp,
+        y: requiredStakeUsd,
+      })
+    } else if (queryType.dailyActiveNodes) {
+      let timestamp: number
+      let activeNodes: number
+      let standbyNodes: number
+
+      if (networkResponseType === 'array') {
+        // Array format: [dateStartTime, stabilityFactorStr, transactionFeeUsdStr, stakeRequiredUsdStr, nodeRewardAmountUsdStr, nodePenaltyUsdStr, defaultTollUsdStr, minTollUsdStr, activeNodes, standbyNodes]
+        const networkStat = stat as number[]
+        timestamp = networkStat[0]
+        activeNodes = networkStat[8] || 0
+        standbyNodes = networkStat[9] || 0
+      } else {
+        const networkStat = stat as DailyNetworkStats
+        timestamp = networkStat.dateStartTime
+        activeNodes = networkStat.activeNodes || 0
+        standbyNodes = networkStat.standbyNodes || 0
+      }
+
+      if (activeNodes > highest.value) {
+        highest = { timestamp, value: activeNodes }
+      }
+      if (activeNodes < lowest.value && activeNodes > 0) {
+        lowest = { timestamp, value: activeNodes }
+      }
+
+      current = activeNodes
+
+      seriesData[0].data.push({
+        x: timestamp,
+        y: activeNodes,
+        activeNodesChartData: {
+          standbyNodes,
+        },
+      })
     }
   })
 
